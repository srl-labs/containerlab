// Code generated by MockGen. DO NOT EDIT.
// Source: links/endpoint.go
//
// Generated by this command:
//
//	mockgen -package=mocklinks -source=links/endpoint.go -destination=./mocks/mocklinks/endpoint.go
//

// Package mocklinks is a generated GoMock package.
package mocklinks

import (
	context "context"
	net "net"
	reflect "reflect"

	links "github.com/srl-labs/containerlab/links"
	gomock "go.uber.org/mock/gomock"
)

// MockEndpoint is a mock of Endpoint interface.
type MockEndpoint struct {
	ctrl     *gomock.Controller
	recorder *MockEndpointMockRecorder
	isgomock struct{}
}

// MockEndpointMockRecorder is the mock recorder for MockEndpoint.
type MockEndpointMockRecorder struct {
	mock *MockEndpoint
}

// NewMockEndpoint creates a new mock instance.
func NewMockEndpoint(ctrl *gomock.Controller) *MockEndpoint {
	mock := &MockEndpoint{ctrl: ctrl}
	mock.recorder = &MockEndpointMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEndpoint) EXPECT() *MockEndpointMockRecorder {
	return m.recorder
}

// Deploy mocks base method.
func (m *MockEndpoint) Deploy(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deploy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deploy indicates an expected call of Deploy.
func (mr *MockEndpointMockRecorder) Deploy(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deploy", reflect.TypeOf((*MockEndpoint)(nil).Deploy), arg0)
}

// GetIPv4Addr mocks base method.
func (m *MockEndpoint) GetIPv4Addr() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIPv4Addr")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetIPv4Addr indicates an expected call of GetIPv4Addr.
func (mr *MockEndpointMockRecorder) GetIPv4Addr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPv4Addr", reflect.TypeOf((*MockEndpoint)(nil).GetIPv4Addr))
}

// GetIPv6Addr mocks base method.
func (m *MockEndpoint) GetIPv6Addr() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIPv6Addr")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetIPv6Addr indicates an expected call of GetIPv6Addr.
func (mr *MockEndpointMockRecorder) GetIPv6Addr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPv6Addr", reflect.TypeOf((*MockEndpoint)(nil).GetIPv6Addr))
}

// GetIfaceAlias mocks base method.
func (m *MockEndpoint) GetIfaceAlias() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIfaceAlias")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetIfaceAlias indicates an expected call of GetIfaceAlias.
func (mr *MockEndpointMockRecorder) GetIfaceAlias() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIfaceAlias", reflect.TypeOf((*MockEndpoint)(nil).GetIfaceAlias))
}

// GetIfaceDisplayName mocks base method.
func (m *MockEndpoint) GetIfaceDisplayName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIfaceDisplayName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetIfaceDisplayName indicates an expected call of GetIfaceDisplayName.
func (mr *MockEndpointMockRecorder) GetIfaceDisplayName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIfaceDisplayName", reflect.TypeOf((*MockEndpoint)(nil).GetIfaceDisplayName))
}

// GetIfaceName mocks base method.
func (m *MockEndpoint) GetIfaceName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIfaceName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetIfaceName indicates an expected call of GetIfaceName.
func (mr *MockEndpointMockRecorder) GetIfaceName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIfaceName", reflect.TypeOf((*MockEndpoint)(nil).GetIfaceName))
}

// GetLink mocks base method.
func (m *MockEndpoint) GetLink() links.Link {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLink")
	ret0, _ := ret[0].(links.Link)
	return ret0
}

// GetLink indicates an expected call of GetLink.
func (mr *MockEndpointMockRecorder) GetLink() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLink", reflect.TypeOf((*MockEndpoint)(nil).GetLink))
}

// GetMac mocks base method.
func (m *MockEndpoint) GetMac() net.HardwareAddr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMac")
	ret0, _ := ret[0].(net.HardwareAddr)
	return ret0
}

// GetMac indicates an expected call of GetMac.
func (mr *MockEndpointMockRecorder) GetMac() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMac", reflect.TypeOf((*MockEndpoint)(nil).GetMac))
}

// GetNode mocks base method.
func (m *MockEndpoint) GetNode() links.Node {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode")
	ret0, _ := ret[0].(links.Node)
	return ret0
}

// GetNode indicates an expected call of GetNode.
func (mr *MockEndpointMockRecorder) GetNode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockEndpoint)(nil).GetNode))
}

// GetRandIfaceName mocks base method.
func (m *MockEndpoint) GetRandIfaceName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandIfaceName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRandIfaceName indicates an expected call of GetRandIfaceName.
func (mr *MockEndpointMockRecorder) GetRandIfaceName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandIfaceName", reflect.TypeOf((*MockEndpoint)(nil).GetRandIfaceName))
}

// HasSameNodeAndInterface mocks base method.
func (m *MockEndpoint) HasSameNodeAndInterface(ept links.Endpoint) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSameNodeAndInterface", ept)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasSameNodeAndInterface indicates an expected call of HasSameNodeAndInterface.
func (mr *MockEndpointMockRecorder) HasSameNodeAndInterface(ept any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSameNodeAndInterface", reflect.TypeOf((*MockEndpoint)(nil).HasSameNodeAndInterface), ept)
}

// IsNodeless mocks base method.
func (m *MockEndpoint) IsNodeless() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNodeless")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNodeless indicates an expected call of IsNodeless.
func (mr *MockEndpointMockRecorder) IsNodeless() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNodeless", reflect.TypeOf((*MockEndpoint)(nil).IsNodeless))
}

// Remove mocks base method.
func (m *MockEndpoint) Remove(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockEndpointMockRecorder) Remove(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockEndpoint)(nil).Remove), arg0)
}

// SetIfaceAlias mocks base method.
func (m *MockEndpoint) SetIfaceAlias(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetIfaceAlias", arg0)
}

// SetIfaceAlias indicates an expected call of SetIfaceAlias.
func (mr *MockEndpointMockRecorder) SetIfaceAlias(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIfaceAlias", reflect.TypeOf((*MockEndpoint)(nil).SetIfaceAlias), arg0)
}

// SetIfaceName mocks base method.
func (m *MockEndpoint) SetIfaceName(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetIfaceName", arg0)
}

// SetIfaceName indicates an expected call of SetIfaceName.
func (mr *MockEndpointMockRecorder) SetIfaceName(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIfaceName", reflect.TypeOf((*MockEndpoint)(nil).SetIfaceName), arg0)
}

// String mocks base method.
func (m *MockEndpoint) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockEndpointMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockEndpoint)(nil).String))
}

// Verify mocks base method.
func (m *MockEndpoint) Verify(arg0 context.Context, arg1 *links.VerifyLinkParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockEndpointMockRecorder) Verify(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockEndpoint)(nil).Verify), arg0, arg1)
}
