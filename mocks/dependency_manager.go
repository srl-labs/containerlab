// Code generated by MockGen. DO NOT EDIT.
// Source: core/dependency_manager/dependency_manager.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=core/dependency_manager/dependency_manager.go -destination=./mocks/dependency_manager.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	dependency_manager "github.com/srl-labs/containerlab/core/dependency_manager"
	nodes "github.com/srl-labs/containerlab/nodes"
	gomock "go.uber.org/mock/gomock"
)

// MockDependencyManager is a mock of DependencyManager interface.
type MockDependencyManager struct {
	ctrl     *gomock.Controller
	recorder *MockDependencyManagerMockRecorder
	isgomock struct{}
}

// MockDependencyManagerMockRecorder is the mock recorder for MockDependencyManager.
type MockDependencyManagerMockRecorder struct {
	mock *MockDependencyManager
}

// NewMockDependencyManager creates a new mock instance.
func NewMockDependencyManager(ctrl *gomock.Controller) *MockDependencyManager {
	mock := &MockDependencyManager{ctrl: ctrl}
	mock.recorder = &MockDependencyManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDependencyManager) EXPECT() *MockDependencyManagerMockRecorder {
	return m.recorder
}

// AddNode mocks base method.
func (m *MockDependencyManager) AddNode(node nodes.Node) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddNode", node)
}

// AddNode indicates an expected call of AddNode.
func (mr *MockDependencyManagerMockRecorder) AddNode(node any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNode", reflect.TypeOf((*MockDependencyManager)(nil).AddNode), node)
}

// CheckAcyclicity mocks base method.
func (m *MockDependencyManager) CheckAcyclicity() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAcyclicity")
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAcyclicity indicates an expected call of CheckAcyclicity.
func (mr *MockDependencyManagerMockRecorder) CheckAcyclicity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAcyclicity", reflect.TypeOf((*MockDependencyManager)(nil).CheckAcyclicity))
}

// GetNode mocks base method.
func (m *MockDependencyManager) GetNode(name string) (*dependency_manager.DependencyNode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode", name)
	ret0, _ := ret[0].(*dependency_manager.DependencyNode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNode indicates an expected call of GetNode.
func (mr *MockDependencyManagerMockRecorder) GetNode(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockDependencyManager)(nil).GetNode), name)
}

// GetNodes mocks base method.
func (m *MockDependencyManager) GetNodes() map[string]*dependency_manager.DependencyNode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodes")
	ret0, _ := ret[0].(map[string]*dependency_manager.DependencyNode)
	return ret0
}

// GetNodes indicates an expected call of GetNodes.
func (mr *MockDependencyManagerMockRecorder) GetNodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodes", reflect.TypeOf((*MockDependencyManager)(nil).GetNodes))
}

// String mocks base method.
func (m *MockDependencyManager) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockDependencyManagerMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockDependencyManager)(nil).String))
}
