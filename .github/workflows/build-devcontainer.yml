name: build-devcontainer
on:
  workflow_call:
    inputs:
      CLAB_VERSION:
        description: "Containerlab version"
        required: true
        type: string
  workflow_dispatch:
    inputs:
      CLAB_VERSION:
        description: "Containerlab version"
        default: "0.59.0"
        required: false
        type: string

      TAG:
        description: "Additional container image tag"
        required: false
        type: string
  # trigger on published release event
  # to created the dev container when the packages are published
  release:
    types:
      - published

env:
  REGISTRY: ghcr.io

jobs:
  build:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          # AMD64 builds
          - platform: "linux/amd64"
            runner: "ubuntu-24.04"
            arch-suffix: "amd64"
            variant: "dind"
            devContFile: .devcontainer/docker-in-docker/devcontainer.json
            image-suffix: "-dind"
          - platform: "linux/amd64"
            runner: "ubuntu-24.04"
            arch-suffix: "amd64"
            variant: "dind-slim"
            devContFile: .devcontainer/docker-in-docker_slim/devcontainer.json
            image-suffix: "-dind-slim"
          - platform: "linux/amd64"
            runner: "ubuntu-24.04"
            arch-suffix: "amd64"
            variant: "dood"
            devContFile: .devcontainer/docker-outside-of-docker/devcontainer.json
            image-suffix: "-dood"
          - platform: "linux/amd64"
            runner: "ubuntu-24.04"
            arch-suffix: "amd64"
            variant: "dood-slim"
            devContFile: .devcontainer/docker-outside-of-docker_slim/devcontainer.json
            image-suffix: "-dood-slim"
          # ARM64 builds
          - platform: "linux/arm64"
            runner: "ubuntu-24.04-arm"
            arch-suffix: "arm64"
            variant: "dind"
            devContFile: .devcontainer/docker-in-docker/devcontainer.json
            image-suffix: "-dind"
          - platform: "linux/arm64"
            runner: "ubuntu-24.04-arm"
            arch-suffix: "arm64"
            variant: "dind-slim"
            devContFile: .devcontainer/docker-in-docker_slim/devcontainer.json
            image-suffix: "-dind-slim"
          - platform: "linux/arm64"
            runner: "ubuntu-24.04-arm"
            arch-suffix: "arm64"
            variant: "dood"
            devContFile: .devcontainer/docker-outside-of-docker/devcontainer.json
            image-suffix: "-dood"
          - platform: "linux/arm64"
            runner: "ubuntu-24.04-arm"
            arch-suffix: "arm64"
            variant: "dood-slim"
            devContFile: .devcontainer/docker-outside-of-docker_slim/devcontainer.json
            image-suffix: "-dood-slim"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=ref,event=branch
            type=ref,event=pr
            # git short commit
            type=sha
            # manually set tag
            type=raw,value=${{ inputs.tag }}

      - name: Extract tags
        id: extract-tags
        run: |
          TAGS=$(echo '${{ steps.meta.outputs.tags }}' | awk -F: '{print $2}' | sed "s/$/\-${{ matrix.arch-suffix }}/" | paste -sd "," -)
          echo "TAGS=$TAGS" >> $GITHUB_OUTPUT
        shell: bash

      - name: Build dev container image
        uses: devcontainers/ci@v0.3
        env:
          CLAB_VERSION: ${{ inputs.clab_version }}
        with:
          imageName: ghcr.io/${{ github.repository }}/devcontainer${{ matrix.image-suffix }}
          imageTag: ${{ steps.extract-tags.outputs.tags }}
          push: always
          platform: ${{ matrix.platform }}
          configFile: ${{ matrix.devContFile }}

  create-manifest:
    needs: build
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        variant:
          - name: "dind"
            image-suffix: "-dind"
          - name: "dind-slim"
            image-suffix: "-dind-slim"
          - name: "dood"
            image-suffix: "-dood"
          - name: "dood-slim"
            image-suffix: "-dood-slim"
    steps:
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=ref,event=branch
            type=ref,event=pr
            # git short commit
            type=sha
            # manually set tag
            type=raw,value=${{ inputs.tag }}

      - name: Extract base tags (without arch suffix)
        id: extract-tags
        run: |
          TAGS=$(echo '${{ steps.meta.outputs.tags }}' | awk -F: '{print $2}' | paste -sd "," -)
          echo "TAGS=$TAGS" >> $GITHUB_OUTPUT
        shell: bash

      - name: Create and push manifest
        run: |
          for tag in $(echo "${{ steps.extract-tags.outputs.tags }}" | tr ',' '\n'); do
            IMAGE_BASE="ghcr.io/${{ github.repository }}/devcontainer${{ matrix.variant.image-suffix }}"
            
            # Create manifest
            docker manifest create "${IMAGE_BASE}:${tag}" \
              --amend "${IMAGE_BASE}:${tag}-amd64" \
              --amend "${IMAGE_BASE}:${tag}-arm64"
            
            # Push manifest
            docker manifest push "${IMAGE_BASE}:${tag}"
          done
